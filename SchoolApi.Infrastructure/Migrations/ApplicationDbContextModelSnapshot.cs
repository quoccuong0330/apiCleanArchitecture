// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApi.Infrastructure.Data;

#nullable disable

namespace SchoolApi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolApi.Domain.Entities.ClassEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.PointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Chemistry")
                        .HasColumnType("float");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Math")
                        .HasColumnType("float");

                    b.Property<double>("Physical")
                        .HasColumnType("float");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4506ad79-ec6d-4b58-81a9-c0201d3d74ac"),
                            Address = "",
                            Email = "admin@example.com",
                            Name = "",
                            Password = "$2a$11$VczTpjwDX/NX4CTbwRjrRuVHVOFHJLXShq5wKaT73e7WP127hfiUS",
                            Phone = "",
                            Role = "admin",
                            YearOfBirth = 0
                        });
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.ClassEntity", b =>
                {
                    b.HasOne("SchoolApi.Domain.Entities.UserEntity", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.PointEntity", b =>
                {
                    b.HasOne("SchoolApi.Domain.Entities.UserEntity", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolApi.Domain.Entities.UserEntity", "Student")
                        .WithOne("TablePoint")
                        .HasForeignKey("SchoolApi.Domain.Entities.PointEntity", "StudentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Editor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("SchoolApi.Domain.Entities.ClassEntity", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.ClassEntity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolApi.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("TablePoint")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
